<!DOCTYPE html>
<html lang="vi">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Công cụ mã hóa/giải mã AES</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f5f5f5;
            padding: 20px;
        }

        .container {
            max-width: 900px;
            background-color: white;
            border-radius: 10px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
            padding: 30px;
            margin-top: 20px;
        }

        .nav-tabs .nav-link {
            font-weight: 500;
        }

        .tab-content {
            padding: 20px 0;
        }

        textarea {
            min-height: 150px;
        }

        .file-info {
            font-size: 0.9em;
            color: #6c757d;
            margin-top: 5px;
        }

        .result-area {
            background-color: #f8f9fa;
            border-radius: 5px;
            padding: 15px;
            margin-top: 20px;
        }

        .byte-view {
            font-family: monospace;
            word-break: break-all;
        }
    </style>
</head>

<body>
    <div class="container">
        <h1 class="text-center mb-4">Công cụ mã hóa/giải mã AES</h1>

        <ul class="nav nav-tabs" id="myTab" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="text-tab" data-bs-toggle="tab" data-bs-target="#text-tab-pane"
                    type="button">Văn bản</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="file-tab" data-bs-toggle="tab" data-bs-target="#file-tab-pane"
                    type="button">Tệp tin</button>
            </li>
        </ul>

        <div class="tab-content" id="myTabContent">
            <!-- Text Tab -->
            <div class="tab-pane fade show active" id="text-tab-pane" role="tabpanel">
                <div class="mb-3">
                    <label for="textInput" class="form-label">Nhập văn bản:</label>
                    <textarea class="form-control" id="textInput" rows="5"></textarea>
                </div>
                <div class="mb-3">
                    <label for="textKey" class="form-label">Khóa :</label>
                    <input type="text" class="form-control" id="textKey" value="2b7e151628aed2a6" maxlength="32">
                </div>
                <div class="d-flex justify-content-center gap-2">
                    <button id="encryptTextBtn" class="btn btn-primary">Mã hóa</button>
                    <button id="decryptTextBtn" class="btn btn-success">Giải mã</button>
                    <button id="clearTextBtn" class="btn btn-secondary">Xóa</button>
                </div>

                <div class="result-area mt-4">
                    <h5>Kết quả:</h5>
                    <div class="mb-2"><strong>Trạng thái:</strong> <span id="textStatus">Chưa thực hiện</span></div>
                    <div class="mb-2"><strong>Thời gian:</strong> <span id="textTime">0</span> ms</div>
                    <div class="mb-2"><strong>Kết quả (hex):</strong>
                        <div class="byte-view" id="textHexResult"></div>
                    </div>
                    <div class="mb-2"><strong>Kết quả (văn bản):</strong>
                        <div class="byte-view" id="textResult"></div>
                    </div>
                </div>
            </div>

            <!-- File Tab -->
            <div class="tab-pane fade" id="file-tab-pane" role="tabpanel">
                <div class="mb-3">
                    <label for="fileInput" class="form-label">Chọn tệp .txt:</label>
                    <input class="form-control" type="file" id="fileInput" accept=".txt">
                    <div id="fileInfo" class="file-info">Chưa chọn tệp</div>
                </div>
                <div class="mb-3">
                    <label for="fileKey" class="form-label">Khóa :</label>
                    <input type="text" class="form-control" id="fileKey" value="2b7e151628aed2a6" maxlength="32">
                </div>
                <div class="mb-3">
                    <label for="fileKeySize" class="form-label">Chọn độ dài khóa:</label>
                    <select class="form-select" id="fileKeySize">
                        <option value="128" selected>128-bit</option>
                        <option value="192">192-bit</option>
                        <option value="256">256-bit</option>
                    </select>
                </div>
                <div class="d-flex justify-content-center gap-2">
                    <button id="encryptFileBtn" class="btn btn-primary">Mã hóa</button>
                    <button id="decryptFileBtn" class="btn btn-success">Giải mã</button>
                    <button id="downloadFileBtn" class="btn btn-info" disabled>Tải về</button>
                </div>

                <div class="result-area mt-4">
                    <h5>Kết quả:</h5>
                    <div class="mb-2"><strong>Trạng thái:</strong> <span id="fileStatus">Chưa thực hiện</span></div>
                    <div class="mb-2"><strong>Thời gian:</strong> <span id="fileTime">0</span> ms</div>
                    <div class="mb-2"><strong>Xem trước:</strong>
                        <div class="byte-view" id="filePreview"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // ========== AES Implementation ==========
        const S_BOX = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
            0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
            0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
            0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
            0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
            0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
            0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
            0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
            0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
            0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
            0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
            0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
            0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
            0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
            0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
            0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16];



        const INV_S_BOX = [0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
            0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
            0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
            0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
            0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
            0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
            0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
            0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
            0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
            0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
            0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
            0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
            0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
            0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
            0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
            0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d];


        const RCON = [0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
            0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39,
            0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
            0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,
            0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
            0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
            0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b,
            0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
            0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94,
            0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
            0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
            0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f,
            0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
            0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
            0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd,
            0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d];

        function gmul(a, b) {
            let p = 0;
            for (let i = 0; i < 8; i++) {
                if (b & 1) p ^= a;
                const hi = a & 0x80;
                a <<= 1;
                if (hi) a ^= 0x1b;
                b >>= 1;
            }
            return p & 0xff;
        }

        function subBytes(state) {
            for (let i = 0; i < state.length; i++) {
                state[i] = S_BOX[state[i]];
            }
        }

        function invSubBytes(state) {
            for (let i = 0; i < state.length; i++) {
                state[i] = INV_S_BOX[state[i]];
            }
        }

        function shiftRows(state) {
            const temp = state.slice();
            for (let i = 1; i < 4; i++) {
                for (let j = 0; j < 4; j++) {
                    state[i + j * 4] = temp[i + ((j + i) % 4) * 4];
                }
            }
        }

        function invShiftRows(state) {
            const temp = state.slice();
            for (let i = 1; i < 4; i++) {
                for (let j = 0; j < 4; j++) {
                    state[i + j * 4] = temp[i + ((j - i + 4) % 4) * 4];
                }
            }
        }

        function mixColumns(state) {
            for (let i = 0; i < 4; i++) {
                const s0 = state[i * 4];
                const s1 = state[i * 4 + 1];
                const s2 = state[i * 4 + 2];
                const s3 = state[i * 4 + 3];

                state[i * 4] = gmul(0x02, s0) ^ gmul(0x03, s1) ^ s2 ^ s3;
                state[i * 4 + 1] = s0 ^ gmul(0x02, s1) ^ gmul(0x03, s2) ^ s3;
                state[i * 4 + 2] = s0 ^ s1 ^ gmul(0x02, s2) ^ gmul(0x03, s3);
                state[i * 4 + 3] = gmul(0x03, s0) ^ s1 ^ s2 ^ gmul(0x02, s3);
            }
        }

        function invMixColumns(state) {
            for (let i = 0; i < 4; i++) {
                const s0 = state[i * 4];
                const s1 = state[i * 4 + 1];
                const s2 = state[i * 4 + 2];
                const s3 = state[i * 4 + 3];

                state[i * 4] = gmul(0x0e, s0) ^ gmul(0x0b, s1) ^ gmul(0x0d, s2) ^ gmul(0x09, s3);
                state[i * 4 + 1] = gmul(0x09, s0) ^ gmul(0x0e, s1) ^ gmul(0x0b, s2) ^ gmul(0x0d, s3);
                state[i * 4 + 2] = gmul(0x0d, s0) ^ gmul(0x09, s1) ^ gmul(0x0e, s2) ^ gmul(0x0b, s3);
                state[i * 4 + 3] = gmul(0x0b, s0) ^ gmul(0x0d, s1) ^ gmul(0x09, s2) ^ gmul(0x0e, s3);
            }
        }

        function addRoundKey(state, roundKey) {
            for (let i = 0; i < state.length; i++) {
                state[i] ^= roundKey[i];
            }
        }

        
        function keyExpansion(key) {
            const expandedKey = new Array(176).fill(0);
            for (let i = 0; i < 16; i++) {
                expandedKey[i] = key[i];
            }

            for (let i = 16; i < 176; i += 4) {
                let temp = expandedKey.slice(i - 4, i);
                if (i % 16 === 0) {
                    temp = [temp[1], temp[2], temp[3], temp[0]];
                    temp = temp.map(b => S_BOX[b]);
                    temp[0] ^= RCON[(i / 16) - 1];
                }
                for (let j = 0; j < 4; j++) {
                    expandedKey[i + j] = expandedKey[i + j - 16] ^ temp[j];
                }
            }

            return expandedKey;
        }

        // Padding functions
        function padData(data) {
            const blockSize = 16;
            const padLength = blockSize - (data.length % blockSize);
            return data.concat(new Array(padLength).fill(padLength));
        }

        function unpadData(data) {
            const padLength = data[data.length - 1];
            // Validate padding
            if (padLength < 1 || padLength > 16) return data;
            for (let i = data.length - padLength; i < data.length; i++) {
                if (data[i] !== padLength) return data;
            }
            return data.slice(0, data.length - padLength);
        }

        // Process data in blocks
        function processBlocks(data, processFn, key) {
            const blockSize = 16;
            const result = [];
            const roundKeys = keyExpansion(key);

            for (let i = 0; i < data.length; i += blockSize) {
                const block = data.slice(i, i + blockSize);
                const processedBlock = processFn(block, roundKeys);
                result.push(...processedBlock);
            }

            return result;
        }

        function aesEncryptBlock(block, roundKeys) {
            const state = block.slice();
            addRoundKey(state, roundKeys.slice(0, 16));

            for (let round = 1; round < 10; round++) {
                subBytes(state);
                shiftRows(state);
                mixColumns(state);
                addRoundKey(state, roundKeys.slice(round * 16, (round + 1) * 16));
            }

            subBytes(state);
            shiftRows(state);
            addRoundKey(state, roundKeys.slice(160, 176));

            return state;
        }

        function aesDecryptBlock(block, roundKeys) {
            const state = block.slice();
            addRoundKey(state, roundKeys.slice(160, 176));

            for (let round = 9; round > 0; round--) {
                invShiftRows(state);
                invSubBytes(state);
                addRoundKey(state, roundKeys.slice(round * 16, (round + 1) * 16));
                invMixColumns(state);
            }

            invShiftRows(state);
            invSubBytes(state);
            addRoundKey(state, roundKeys.slice(0, 16));

            return state;
        }

        // Main encryption/decryption functions
        function aesEncrypt(data, key) {
            const paddedData = padData(data);
            return processBlocks(paddedData, aesEncryptBlock, key);
        }

        function aesDecrypt(data, key) {
            const decryptedData = processBlocks(data, aesDecryptBlock, key);
            return unpadData(decryptedData);
        }

        function stringToUtf8Bytes(str) {
            return new TextEncoder().encode(str);
        }

        function utf8BytesToString(bytes) {
            return new TextDecoder().decode(new Uint8Array(bytes));
        }

        // ========== Text Operations ==========
        let textResult = null;

        document.getElementById('encryptTextBtn').addEventListener('click', function () {
            const inputText = document.getElementById('textInput').value;
            if (!inputText) {
                alert('Vui lòng nhập văn bản cần mã hóa');
                return;
            }

            const keyStr = document.getElementById('textKey').value;
            if (keyStr.length !== 16 && keyStr.length !== 24 && keyStr.length !== 32) {
                alert('Khóa phải có độ dài 16, 24 hoặc 32 ký tự');
                return;
            }
            const key = Array.from(keyStr).map(c => c.charCodeAt(0));

            const startTime = performance.now();
            const inputData = Array.from(stringToUtf8Bytes(inputText));
            textResult = aesEncrypt(inputData, key);
            const endTime = performance.now();

            // Hiển thị kết quả
            const hexResult = textResult.map(b => b.toString(16).padStart(2, '0')).join('');
            const textOutput = utf8BytesToString(textResult);

            document.getElementById('textStatus').textContent = 'Đã mã hóa';
            document.getElementById('textTime').textContent = (endTime - startTime).toFixed(2);
            document.getElementById('textHexResult').textContent = hexResult;
            document.getElementById('textResult').textContent = textOutput;
        });

        document.getElementById('decryptTextBtn').addEventListener('click', function () {
            const inputText = document.getElementById('textInput').value;
            if (!inputText) {
                alert('Vui lòng nhập văn bản cần giải mã');
                return;
            }

            const keyStr = document.getElementById('textKey').value;
            if (keyStr.length !== 16 && keyStr.length !== 24 && keyStr.length !== 32) {
                alert('Khóa phải có độ dài 16, 24 hoặc 32 ký tự');
                return;
            }
            const key = Array.from(keyStr).map(c => c.charCodeAt(0));

            try {
                const startTime = performance.now();
                let inputData;
                if (/^([0-9a-fA-F]{2})+$/.test(inputText.trim())) {
                    // Nếu là hex string
                    inputData = inputText.trim().match(/.{2}/g).map(b => parseInt(b, 16));
                } else {
                    // Nếu là raw text
                    inputData = Array.from(stringToUtf8Bytes(inputText));
                }

                textResult = aesDecrypt(inputData, key);
                const endTime = performance.now();

                // Hiển thị kết quả
                const hexResult = textResult.map(b => b.toString(16).padStart(2, '0')).join('');
                const textOutput = utf8BytesToString(textResult);

                document.getElementById('textStatus').textContent = 'Đã giải mã';
                document.getElementById('textTime').textContent = (endTime - startTime).toFixed(2);
                document.getElementById('textHexResult').textContent = hexResult;
                document.getElementById('textResult').textContent = textOutput;
            } catch (e) {
                alert('Giải mã thất bại: ' + e.message);
                document.getElementById('textStatus').textContent = 'Lỗi khi giải mã';
            }
        });

        document.getElementById('clearTextBtn').addEventListener('click', function () {
            document.getElementById('textInput').value = '';
            document.getElementById('textStatus').textContent = 'Đã xóa';
            document.getElementById('textHexResult').textContent = '';
            document.getElementById('textResult').textContent = '';
            textResult = null;
        });

        // ========== File Operations ==========
        let fileResult = null;
        let currentFileName = '';

        document.getElementById('fileInput').addEventListener('change', function (e) {
            const file = e.target.files[0];
            if (!file) return;

            currentFileName = file.name;
            document.getElementById('fileInfo').textContent = `Đã chọn: ${file.name} (${(file.size / 1024).toFixed(2)} KB)`;
            document.getElementById('fileStatus').textContent = 'Tệp đã sẵn sàng';
            document.getElementById('filePreview').textContent = '';
            document.getElementById('downloadFileBtn').disabled = true;

            const reader = new FileReader();
            reader.onload = function (e) {
                const content = e.target.result;
                // Hiển thị xem trước 200 ký tự đầu
                document.getElementById('filePreview').textContent =
                    content.length > 200 ? content.substring(0, 200) + '...' : content;
            };
            reader.readAsText(file);
        });

        function generateRandomKey(length) {
            const key = [];
            for (let i = 0; i < length; i++) {
                key.push(Math.floor(Math.random() * 256)); // Random byte (0-255)
            }
            return key;
        }

        document.getElementById('encryptFileBtn').addEventListener('click', function () {
            const fileInput = document.getElementById('fileInput');
            if (!fileInput.files || fileInput.files.length === 0) {
                alert('Vui lòng chọn tệp trước');
                return;
            }

            const keySize = parseInt(document.getElementById('fileKeySize').value, 10);
            let keyStr = document.getElementById('fileKey').value;

            if (keyStr.length !== keySize / 8) {
                alert(`Khóa không hợp lệ. Tự động tạo khóa ngẫu nhiên ${keySize}-bit.`);
                const randomKey = generateRandomKey(keySize / 8);
                keyStr = randomKey.map(byte => String.fromCharCode(byte)).join('');
                document.getElementById('fileKey').value = keyStr; // Display the generated key
            }

            const key = Array.from(keyStr).map(c => c.charCodeAt(0));

            const file = fileInput.files[0];
            const reader = new FileReader();

            reader.onload = function (e) {
                const content = e.target.result;
                const inputData = Array.from(stringToUtf8Bytes(content));

                const startTime = performance.now();
                fileResult = aesEncrypt(inputData, key);
                const endTime = performance.now();

                // Convert encrypted data to hex
                const hexResult = fileResult.map(b => b.toString(16).padStart(2, '0')).join('');

                // Display results
                const hexPreview = hexResult.slice(0, 200) + (hexResult.length > 200 ? '...' : '');
                document.getElementById('fileStatus').textContent = `Đã mã hóa (${fileResult.length} bytes)`;
                document.getElementById('fileTime').textContent = (endTime - startTime).toFixed(2);
                document.getElementById('filePreview').textContent = hexPreview;
                document.getElementById('downloadFileBtn').disabled = false;

                // Save hex result for download
                fileResult = hexResult;
            };

            reader.readAsText(file);
        });

        document.getElementById('decryptFileBtn').addEventListener('click', function () {
            const fileInput = document.getElementById('fileInput');
            if (!fileInput.files || fileInput.files.length === 0) {
                alert('Vui lòng chọn tệp trước');
                return;
            }

            const keySize = parseInt(document.getElementById('fileKeySize').value, 10);
            const keyStr = document.getElementById('fileKey').value;

            if (keyStr.length !== keySize / 8) {
                alert(`Khóa không hợp lệ. Vui lòng nhập đúng khóa ${keySize / 8} ký tự đã sử dụng để mã hóa.`);
                return;
            }

            const key = Array.from(keyStr).map(c => c.charCodeAt(0));

            const file = fileInput.files[0];
            const reader = new FileReader();

            reader.onload = function (e) {
                try {
                    const content = e.target.result;

                    // Detect if the content is hex-encoded
                    let inputData;
                    if (/^([0-9a-fA-F]{2})+$/.test(content.trim())) {
                        inputData = content.trim().match(/.{2}/g).map(b => parseInt(b, 16));
                    } else {
                        inputData = Array.from(stringToUtf8Bytes(content));
                    }

                    const startTime = performance.now();
                    fileResult = aesDecrypt(inputData, key);
                    const endTime = performance.now();

                    // Validate decrypted content
                    const textPreview = utf8BytesToString(fileResult.slice(0, 200));
                    if (!textPreview.trim()) {
                        throw new Error('Nội dung giải mã không hợp lệ hoặc bị lỗi.');
                    }

                    // Display results
                    document.getElementById('fileStatus').textContent = `Đã giải mã (${fileResult.length} bytes)`;
                    document.getElementById('fileTime').textContent = (endTime - startTime).toFixed(2);
                    document.getElementById('filePreview').textContent =
                        textPreview + (fileResult.length > 200 ? '...' : '');
                    document.getElementById('downloadFileBtn').disabled = false;
                } catch (e) {
                    alert('Giải mã thất bại: ' + e.message);
                    document.getElementById('fileStatus').textContent = 'Lỗi khi giải mã';
                    document.getElementById('filePreview').textContent = '';
                }
            };

            reader.readAsText(file);
        });

        document.getElementById('downloadFileBtn').addEventListener('click', function () {
            if (!fileResult) return;

            let blob, fileName;
            if (document.getElementById('fileStatus').textContent.includes('mã hóa')) {
                // Save encrypted hex data as a .txt file
                blob = new Blob([fileResult], { type: 'text/plain' });
                fileName = currentFileName.replace(/\.[^/.]+$/, '') + '_encrypted.txt';
            } else {
                // Save decrypted text as a .txt file
                const text = String.fromCharCode(...fileResult);
                blob = new Blob([text], { type: 'text/plain' });
                fileName = currentFileName.replace(/\.[^/.]+$/, '') + '_decrypted.txt';
            }

            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = fileName;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        });
    </script>
</body>

</html>